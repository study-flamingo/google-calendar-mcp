{
  "version": 3,
  "sources": ["../src/index.ts", "../src/auth/client.ts", "../src/auth/utils.ts", "../src/auth/server.ts", "../src/auth/tokenManager.ts", "../src/handlers/listTools.ts", "../src/schemas/validators.ts", "../src/services/googleCalendar.ts", "../src/handlers/callTool.ts"],
  "sourcesContent": ["import { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\r\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\r\nimport {\r\n  ListToolsRequestSchema,\r\n  CallToolRequestSchema,\r\n} from \"@modelcontextprotocol/sdk/types.js\";\r\nimport { OAuth2Client } from \"google-auth-library\";\r\nimport { fileURLToPath } from \"url\";\r\n\r\n// Import modular components\r\nimport { initializeOAuth2Client } from './auth/client.js';\r\nimport { AuthServer } from './auth/server.js';\r\nimport { TokenManager } from './auth/tokenManager.js';\r\nimport { getToolDefinitions } from './handlers/listTools.js';\r\nimport { handleCallTool } from './handlers/callTool.js';\r\n\r\n// --- Global Variables --- \r\n// Create server instance (global for export)\r\nconst server = new Server(\r\n  {\r\n    name: \"google-calendar\",\r\n    version: \"1.0.0\",\r\n  },\r\n  {\r\n    capabilities: {\r\n      tools: {},\r\n    },\r\n  }\r\n);\r\n\r\nlet oauth2Client: OAuth2Client;\r\nlet tokenManager: TokenManager;\r\nlet authServer: AuthServer;\r\n\r\n// --- Main Application Logic --- \r\nasync function main() {\r\n  // All logging must use console.error, not console.log, to avoid interfering with stdio transport\r\n  console.error(\"=== MCP SERVER STARTUP SEQUENCE STARTED ===\");\r\n  try {\r\n    // 1. Initialize Authentication\r\n    console.error(\"Step 1: Initializing Authentication...\");\r\n    oauth2Client = await initializeOAuth2Client();\r\n    tokenManager = new TokenManager(oauth2Client);\r\n    authServer = new AuthServer(oauth2Client);\r\n\r\n    // 2. Ensure Authentication or Start Auth Server\r\n    // validateTokens attempts to load/refresh first.\r\n    console.error(\"Step 2: Validating authentication tokens...\");\r\n    const tokensValid = await tokenManager.validateTokens();\r\n    console.error(`Token validation result: ${tokensValid ? 'VALID' : 'INVALID/MISSING'}`);\r\n    \r\n    if (!tokensValid) {\r\n      console.error(\"Authentication required or token expired, starting auth server...\");\r\n      const success = await authServer.start(); // Tries ports 3000-3004\r\n      if (!success) {\r\n        console.error(\"Critical: Failed to start authentication server. Please check port availability (3000-3004) or existing auth issues.\");\r\n        // Exit because the server cannot function without potential auth\r\n        process.exit(1);\r\n      }\r\n      // If the auth server starts, the user needs to interact with it.\r\n      // The tool handler will reject calls until authentication is complete.\r\n      console.error(\"Please authenticate via the browser link provided by the auth server.\");\r\n    }\r\n\r\n    // 3. Set up MCP Handlers\r\n    console.error(\"Step 3: Setting up MCP handlers...\");\r\n    \r\n    // List Tools Handler\r\n    console.error(\"Setting up tool definitions handler...\");\r\n    server.setRequestHandler(ListToolsRequestSchema, async () => {\r\n      // Directly return the definitions from the handler module\r\n      return getToolDefinitions();\r\n    });\r\n\r\n    // Call Tool Handler\r\n    server.setRequestHandler(CallToolRequestSchema, async (request) => {\r\n      // Check if tokens are valid before handling the request\r\n      if (!(await tokenManager.validateTokens())) {\r\n        throw new Error(\"Authentication required. Please run 'npm run auth' to authenticate.\");\r\n      }\r\n      \r\n      // Delegate the actual tool execution to the specialized handler\r\n      return handleCallTool(request, oauth2Client);\r\n    });\r\n\r\n    // 4. Connect Server Transport\r\n    console.error(\"Step 4: Connecting server transport...\");\r\n    const transport = new StdioServerTransport();\r\n    await server.connect(transport);\r\n\r\n    // 5. Set up Graceful Shutdown\r\n    console.error(\"Step 5: Setting up graceful shutdown...\");\r\n    process.on(\"SIGINT\", cleanup);\r\n    process.on(\"SIGTERM\", cleanup);\r\n\r\n  } catch (error: unknown) {\r\n    process.exit(1);\r\n  }\r\n  console.error(\"=== MCP SERVER STARTUP SEQUENCE COMPLETED SUCCESSFULLY ===\");\r\n  // Note: After this point, stdout is reserved exclusively for MCP protocol messages\r\n}\r\n\r\n// --- Cleanup Logic --- \r\nasync function cleanup() {\r\n  try {\r\n    if (authServer) {\r\n      // Attempt to stop the auth server if it exists and might be running\r\n      await authServer.stop();\r\n    }\r\n    process.exit(0);\r\n  } catch (error: unknown) {\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\n// --- Exports & Execution Guard --- \r\n// Export server and main for testing or potential programmatic use\r\nexport { main, server };\r\n\r\n// Run main() only when this script is executed directly\r\nconst isDirectRun = import.meta.url.startsWith('file://') && process.argv[1] === fileURLToPath(import.meta.url);\r\nif (isDirectRun) {\r\n  main().catch(() => {\r\n    process.exit(1);\r\n  });\r\n}\r\n", "import { OAuth2Client } from 'google-auth-library';\r\nimport * as fs from 'fs/promises';\r\nimport { getKeysFilePath } from './utils.js';\r\n\r\nexport async function initializeOAuth2Client(): Promise<OAuth2Client> {\r\n  try {\r\n    const keysContent = await fs.readFile(getKeysFilePath(), \"utf-8\");\r\n    const keys = JSON.parse(keysContent);\r\n\r\n    const { client_id, client_secret, redirect_uris } = keys.installed;\r\n\r\n    // Use the first redirect URI as the default for the base client\r\n    return new OAuth2Client({\r\n      clientId: client_id,\r\n      clientSecret: client_secret,\r\n      redirectUri: redirect_uris[0], \r\n    });\r\n  } catch (error) {\r\n    throw new Error(`Error loading OAuth keys: ${error instanceof Error ? error.message : error}`);\r\n  }\r\n}\r\n\r\nexport async function loadCredentials(): Promise<{ client_id: string; client_secret: string }> {\r\n  try {\r\n    const keysContent = await fs.readFile(getKeysFilePath(), \"utf-8\");\r\n    const keys = JSON.parse(keysContent);\r\n    const { client_id, client_secret } = keys.installed;\r\n    if (!client_id || !client_secret) {\r\n        throw new Error('Client ID or Client Secret missing in keys file.');\r\n    }\r\n    return { client_id, client_secret };\r\n  } catch (error) {\r\n    throw new Error(`Error loading credentials: ${error instanceof Error ? error.message : error}`);\r\n  }\r\n} ", "import * as path from 'path';\r\nimport { fileURLToPath } from 'url';\r\n\r\n// Helper to get the project root directory reliably\r\nfunction getProjectRoot(): string {\r\n  const __dirname = path.dirname(fileURLToPath(import.meta.url)); \r\n  // In build output (e.g., build/bundle.js), __dirname is .../build\r\n  // Go up ONE level to get the project root\r\n  const projectRoot = path.join(__dirname, \"..\"); // Corrected: Go up ONE level\r\n  return path.resolve(projectRoot); // Ensure absolute path\r\n}\r\n\r\n// Returns the absolute path for the saved token file.\r\nexport function getSecureTokenPath(): string {\r\n  const projectRoot = getProjectRoot();\r\n  const tokenPath = path.join(projectRoot, \".gcp-saved-tokens.json\");\r\n  return tokenPath; // Already absolute from getProjectRoot\r\n}\r\n\r\n// Returns the absolute path for the GCP OAuth keys file.\r\nexport function getKeysFilePath(): string {\r\n  const projectRoot = getProjectRoot();\r\n  const keysPath = path.join(projectRoot, \"gcp-oauth.keys.json\"); \r\n  return keysPath; // Already absolute from getProjectRoot\r\n} ", "import express from 'express';\r\nimport { OAuth2Client } from 'google-auth-library';\r\nimport { TokenManager } from './tokenManager.js';\r\nimport http from 'http';\r\nimport open from 'open';\r\nimport { loadCredentials } from './client.js';\r\n\r\nexport class AuthServer {\r\n  private baseOAuth2Client: OAuth2Client; // Used by TokenManager for validation/refresh\r\n  private flowOAuth2Client: OAuth2Client | null = null; // Used specifically for the auth code flow\r\n  private app: express.Express;\r\n  private server: http.Server | null = null;\r\n  private tokenManager: TokenManager;\r\n  private portRange: { start: number; end: number };\r\n  public authCompletedSuccessfully = false; // Flag for standalone script\r\n\r\n  constructor(oauth2Client: OAuth2Client) {\r\n    this.baseOAuth2Client = oauth2Client;\r\n    this.tokenManager = new TokenManager(oauth2Client);\r\n    this.app = express();\r\n    this.portRange = { start: 3000, end: 3004 };\r\n    this.setupRoutes();\r\n  }\r\n\r\n  private setupRoutes(): void {\r\n    this.app.get('/', (req, res) => {\r\n      // Generate the URL using the active flow client if available, else base\r\n      const clientForUrl = this.flowOAuth2Client || this.baseOAuth2Client;\r\n      const scopes = ['https://www.googleapis.com/auth/calendar'];\r\n      const authUrl = clientForUrl.generateAuthUrl({\r\n        access_type: 'offline',\r\n        scope: scopes,\r\n        prompt: 'consent'\r\n      });\r\n      res.send(`<h1>Google Calendar Authentication</h1><a href=\"${authUrl}\">Authenticate with Google</a>`);\r\n    });\r\n\r\n    this.app.get('/oauth2callback', async (req, res) => {\r\n      const code = req.query.code as string;\r\n      if (!code) {\r\n        res.status(400).send('Authorization code missing');\r\n        return;\r\n      }\r\n      // IMPORTANT: Use the flowOAuth2Client to exchange the code\r\n      if (!this.flowOAuth2Client) {\r\n        res.status(500).send('Authentication flow not properly initiated.');\r\n        return;\r\n      }\r\n      try {\r\n        const { tokens } = await this.flowOAuth2Client.getToken(code);\r\n        // Save tokens using the TokenManager (which uses the base client)\r\n        await this.tokenManager.saveTokens(tokens);\r\n        this.authCompletedSuccessfully = true;\r\n\r\n        // Get the path where tokens were saved\r\n        const tokenPath = this.tokenManager.getTokenPath();\r\n\r\n        // Send a more informative HTML response including the path\r\n        res.send(`\r\n          <!DOCTYPE html>\r\n          <html lang=\"en\">\r\n          <head>\r\n              <meta charset=\"UTF-8\">\r\n              <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n              <title>Authentication Successful</title>\r\n              <style>\r\n                  body { font-family: sans-serif; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f4f4f4; margin: 0; }\r\n                  .container { text-align: center; padding: 2em; background-color: #fff; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\r\n                  h1 { color: #4CAF50; }\r\n                  p { color: #333; margin-bottom: 0.5em; }\r\n                  code { background-color: #eee; padding: 0.2em 0.4em; border-radius: 3px; font-size: 0.9em; }\r\n              </style>\r\n          </head>\r\n          <body>\r\n              <div class=\"container\">\r\n                  <h1>Authentication Successful!</h1>\r\n                  <p>Your authentication tokens have been saved successfully to:</p>\r\n                  <p><code>${tokenPath}</code></p>\r\n                  <p>You can now close this browser window.</p>\r\n              </div>\r\n          </body>\r\n          </html>\r\n        `);\r\n      } catch (error: unknown) {\r\n        this.authCompletedSuccessfully = false;\r\n        const message = error instanceof Error ? error.message : 'Unknown error';\r\n        // Send an HTML error response\r\n        res.status(500).send(`\r\n          <!DOCTYPE html>\r\n          <html lang=\"en\">\r\n          <head>\r\n              <meta charset=\"UTF-8\">\r\n              <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n              <title>Authentication Failed</title>\r\n              <style>\r\n                  body { font-family: sans-serif; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f4f4f4; margin: 0; }\r\n                  .container { text-align: center; padding: 2em; background-color: #fff; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\r\n                  h1 { color: #F44336; }\r\n                  p { color: #333; }\r\n              </style>\r\n          </head>\r\n          <body>\r\n              <div class=\"container\">\r\n                  <h1>Authentication Failed</h1>\r\n                  <p>An error occurred during authentication:</p>\r\n                  <p><code>${message}</code></p>\r\n                  <p>Please try again or check the server logs.</p>\r\n              </div>\r\n          </body>\r\n          </html>\r\n        `);\r\n      }\r\n    });\r\n  }\r\n\r\n  async start(openBrowser = true): Promise<boolean> {\r\n    if (await this.tokenManager.validateTokens()) {\r\n      this.authCompletedSuccessfully = true;\r\n      return true;\r\n    }\r\n    \r\n    // Try to start the server and get the port\r\n    const port = await this.startServerOnAvailablePort();\r\n    if (port === null) {\r\n      this.authCompletedSuccessfully = false;\r\n      return false;\r\n    }\r\n\r\n    // Successfully started server on `port`. Now create the flow-specific OAuth client.\r\n    try {\r\n      const { client_id, client_secret } = await loadCredentials();\r\n      this.flowOAuth2Client = new OAuth2Client(\r\n        client_id,\r\n        client_secret,\r\n        `http://localhost:${port}/oauth2callback`\r\n      );\r\n    } catch (error) {\r\n        // Could not load credentials, cannot proceed with auth flow\r\n        this.authCompletedSuccessfully = false;\r\n        await this.stop(); // Stop the server we just started\r\n        return false;\r\n    }\r\n\r\n    if (openBrowser) {\r\n      // Generate Auth URL using the newly created flow client\r\n      const authorizeUrl = this.flowOAuth2Client.generateAuthUrl({\r\n        access_type: 'offline',\r\n        scope: ['https://www.googleapis.com/auth/calendar'],\r\n        prompt: 'consent'\r\n      });\r\n      await open(authorizeUrl);\r\n    }\r\n\r\n    return true; // Auth flow initiated\r\n  }\r\n\r\n  private async startServerOnAvailablePort(): Promise<number | null> {\r\n    for (let port = this.portRange.start; port <= this.portRange.end; port++) {\r\n      try {\r\n        await new Promise<void>((resolve, reject) => {\r\n          // Create a temporary server instance to test the port\r\n          const testServer = this.app.listen(port, () => {\r\n            this.server = testServer; // Assign to class property *only* if successful\r\n            resolve();\r\n          });\r\n          testServer.on('error', (err: NodeJS.ErrnoException) => {\r\n            if (err.code === 'EADDRINUSE') {\r\n              // Port is in use, close the test server and reject\r\n              testServer.close(() => reject(err)); \r\n            } else {\r\n              // Other error, reject\r\n              reject(err);\r\n            }\r\n          });\r\n        });\r\n        return port; // Port successfully bound\r\n      } catch (error: unknown) {\r\n        // Check if it's EADDRINUSE, otherwise rethrow or handle\r\n        if (!(error instanceof Error && 'code' in error && error.code === 'EADDRINUSE')) {\r\n            // An unexpected error occurred during server start\r\n            return null;\r\n        }\r\n        // EADDRINUSE occurred, loop continues\r\n      }\r\n    }\r\n    return null; // No port found\r\n  }\r\n\r\n  public getRunningPort(): number | null {\r\n    if (this.server) {\r\n      const address = this.server.address();\r\n      if (typeof address === 'object' && address !== null) {\r\n        return address.port;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  async stop(): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      if (this.server) {\r\n        this.server.close((err) => {\r\n          if (err) {\r\n            reject(err);\r\n          } else {\r\n            this.server = null;\r\n            resolve();\r\n          }\r\n        });\r\n      } else {\r\n        resolve();\r\n      }\r\n    });\r\n  }\r\n} ", "import { OAuth2Client, Credentials } from 'google-auth-library';\r\nimport * as fs from 'fs/promises';\r\nimport * as path from 'path';\r\nimport { getSecureTokenPath } from './utils.js';\r\nimport { GaxiosError } from 'gaxios';\r\n\r\nexport class TokenManager {\r\n  private oauth2Client: OAuth2Client;\r\n  private tokenPath: string;\r\n\r\n  constructor(oauth2Client: OAuth2Client) {\r\n    this.oauth2Client = oauth2Client;\r\n    this.tokenPath = getSecureTokenPath();\r\n    this.setupTokenRefresh();\r\n  }\r\n\r\n  // Method to expose the token path\r\n  public getTokenPath(): string {\r\n    return this.tokenPath;\r\n  }\r\n\r\n  private async ensureTokenDirectoryExists(): Promise<void> {\r\n    try {\r\n        const dir = path.dirname(this.tokenPath);\r\n        await fs.mkdir(dir, { recursive: true });\r\n    } catch (error: unknown) {\r\n        // Ignore errors if directory already exists, re-throw others\r\n        if (error instanceof Error && 'code' in error && error.code !== 'EEXIST') {\r\n            console.error('Failed to create token directory:', error);\r\n            throw error;\r\n        }\r\n    }\r\n  }\r\n\r\n  private setupTokenRefresh(): void {\r\n    this.oauth2Client.on(\"tokens\", async (newTokens) => {\r\n      try {\r\n        await this.ensureTokenDirectoryExists();\r\n        const currentTokens = JSON.parse(await fs.readFile(this.tokenPath, \"utf-8\"));\r\n        const updatedTokens = {\r\n          ...currentTokens,\r\n          ...newTokens,\r\n          refresh_token: newTokens.refresh_token || currentTokens.refresh_token,\r\n        };\r\n        await fs.writeFile(this.tokenPath, JSON.stringify(updatedTokens, null, 2), {\r\n          mode: 0o600,\r\n        });\r\n        console.error(\"Tokens updated and saved\");\r\n      } catch (error: unknown) {\r\n        // Handle case where currentTokens might not exist yet\r\n        if (error instanceof Error && 'code' in error && error.code === 'ENOENT') { \r\n          try {\r\n             await fs.writeFile(this.tokenPath, JSON.stringify(newTokens, null, 2), { mode: 0o600 });\r\n             console.error(\"New tokens saved\");\r\n          } catch (writeError) {\r\n            console.error(\"Error saving initial tokens:\", writeError);\r\n          }\r\n        } else {\r\n            console.error(\"Error saving updated tokens:\", error);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async loadSavedTokens(): Promise<boolean> {\r\n    try {\r\n      await this.ensureTokenDirectoryExists();\r\n      if (\r\n        !(await fs\r\n          .access(this.tokenPath)\r\n          .then(() => true)\r\n          .catch(() => false))\r\n      ) {\r\n        console.error(\"No token file found at:\", this.tokenPath);\r\n        return false;\r\n      }\r\n\r\n      const tokens = JSON.parse(await fs.readFile(this.tokenPath, \"utf-8\"));\r\n\r\n      if (!tokens || typeof tokens !== \"object\") {\r\n        console.error(\"Invalid token format in file:\", this.tokenPath);\r\n        return false;\r\n      }\r\n\r\n      this.oauth2Client.setCredentials(tokens);\r\n      return true;\r\n    } catch (error: unknown) {\r\n      console.error(\"Error loading tokens:\", error);\r\n      // Attempt to delete potentially corrupted token file\r\n      if (error instanceof Error && 'code' in error && error.code !== 'ENOENT') { \r\n          try { \r\n              await fs.unlink(this.tokenPath); \r\n              console.error(\"Removed potentially corrupted token file\") \r\n            } catch (unlinkErr) { /* ignore */ } \r\n      }\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async refreshTokensIfNeeded(): Promise<boolean> {\r\n    const expiryDate = this.oauth2Client.credentials.expiry_date;\r\n    const isExpired = expiryDate\r\n      ? Date.now() >= expiryDate - 5 * 60 * 1000 // 5 minute buffer\r\n      : !this.oauth2Client.credentials.access_token; // No token means we need one\r\n\r\n    if (isExpired && this.oauth2Client.credentials.refresh_token) {\r\n      console.error(\"Auth token expired or nearing expiry, refreshing...\");\r\n      try {\r\n        const response = await this.oauth2Client.refreshAccessToken();\r\n        const newTokens = response.credentials;\r\n\r\n        if (!newTokens.access_token) {\r\n          throw new Error(\"Received invalid tokens during refresh\");\r\n        }\r\n        // The 'tokens' event listener should handle saving\r\n        this.oauth2Client.setCredentials(newTokens);\r\n        console.error(\"Token refreshed successfully\");\r\n        return true;\r\n      } catch (refreshError) {\r\n        if (refreshError instanceof GaxiosError && refreshError.response?.data?.error === 'invalid_grant') {\r\n            console.error(\"Error refreshing auth token: Invalid grant. Token likely expired or revoked. Please re-authenticate.\");\r\n            // Optionally clear the potentially invalid tokens here\r\n            // await this.clearTokens(); \r\n            return false; // Indicate failure due to invalid grant\r\n        } else {\r\n            // Handle other refresh errors\r\n            console.error(\"Error refreshing auth token:\", refreshError);\r\n            return false;\r\n        }\r\n      }\r\n    } else if (!this.oauth2Client.credentials.access_token && !this.oauth2Client.credentials.refresh_token) {\r\n        console.error(\"No access or refresh token available. Please re-authenticate.\");\r\n        return false;\r\n    } else {\r\n        // Token is valid or no refresh token available\r\n        return true;\r\n    }\r\n  }\r\n\r\n  async validateTokens(): Promise<boolean> {\r\n    if (!this.oauth2Client.credentials || !this.oauth2Client.credentials.access_token) {\r\n        // Try loading first if no credentials set\r\n        if (!(await this.loadSavedTokens())) {\r\n            return false; // No saved tokens to load\r\n        }\r\n        // Check again after loading\r\n        if (!this.oauth2Client.credentials || !this.oauth2Client.credentials.access_token) {\r\n            return false; // Still no token after loading\r\n        }\r\n    }\r\n    return this.refreshTokensIfNeeded();\r\n  }\r\n\r\n  async saveTokens(tokens: Credentials): Promise<void> {\r\n    try {\r\n        await this.ensureTokenDirectoryExists();\r\n        await fs.writeFile(this.tokenPath, JSON.stringify(tokens, null, 2), { mode: 0o600 });\r\n        this.oauth2Client.setCredentials(tokens);\r\n        console.error(\"Tokens saved successfully to:\", this.tokenPath);\r\n    } catch (error: unknown) {\r\n        console.error(\"Error saving tokens:\", error);\r\n        throw error;\r\n    }\r\n  }\r\n\r\n  async clearTokens(): Promise<void> {\r\n    try {\r\n      this.oauth2Client.setCredentials({}); // Clear in memory\r\n      await fs.unlink(this.tokenPath);\r\n      console.error(\"Tokens cleared successfully\");\r\n    } catch (error: unknown) {\r\n      if (error instanceof Error && 'code' in error && error.code === 'ENOENT') {\r\n        // File already gone, which is fine\r\n        console.error(\"Token file already deleted\");\r\n      } else {\r\n        console.error(\"Error clearing tokens:\", error);\r\n        // Don't re-throw, clearing is best-effort\r\n      }\r\n    }\r\n  }\r\n} ", "import { ListToolsRequestSchema } from \"@modelcontextprotocol/sdk/types.js\";\r\n\r\n// Extracted reminder properties definition for reusability\r\nconst remindersInputProperty = {\r\n    type: \"object\",\r\n    description: \"Reminder settings for the event\",\r\n    properties: {\r\n      useDefault: {\r\n        type: \"boolean\",\r\n        description: \"Whether to use the default reminders\",\r\n      },\r\n      overrides: {\r\n        type: \"array\",\r\n        description: \"Custom reminders (uses popup notifications by default unless email is specified)\",\r\n        items: {\r\n          type: \"object\",\r\n          properties: {\r\n            method: {\r\n              type: \"string\",\r\n              enum: [\"email\", \"popup\"],\r\n              description: \"Reminder method (defaults to popup unless email is specified)\",\r\n              default: \"popup\"\r\n            },\r\n            minutes: {\r\n              type: \"number\",\r\n              description: \"Minutes before the event to trigger the reminder\",\r\n            }\r\n          },\r\n          required: [\"minutes\"]\r\n        }\r\n      }\r\n    },\r\n    required: [\"useDefault\"]\r\n};\r\n\r\nexport function getToolDefinitions() {\r\n  return {\r\n    tools: [\r\n      {\r\n        name: \"list-calendars\",\r\n        description: \"List all available calendars\",\r\n        inputSchema: {\r\n          type: \"object\",\r\n          properties: {}, // No arguments needed\r\n          required: [],\r\n        },\r\n      },\r\n      {\r\n        name: \"list-events\",\r\n        description: \"List events from a calendar\",\r\n        inputSchema: {\r\n          type: \"object\",\r\n          properties: {\r\n            calendarId: {\r\n              type: \"string\",\r\n              description: \"ID of the calendar to list events from (use 'primary' for the main calendar)\",\r\n            },\r\n            timeMin: {\r\n              type: \"string\",\r\n              format: \"date-time\",\r\n              description: \"Start time in ISO format with timezone required (e.g., 2024-01-01T00:00:00Z or 2024-01-01T00:00:00+00:00). Date-time must end with Z (UTC) or +/-HH:MM offset.\",\r\n            },\r\n            timeMax: {\r\n              type: \"string\",\r\n              format: \"date-time\",\r\n              description: \"End time in ISO format with timezone required (e.g., 2024-12-31T23:59:59Z or 2024-12-31T23:59:59+00:00). Date-time must end with Z (UTC) or +/-HH:MM offset.\",\r\n            },\r\n          },\r\n          required: [\"calendarId\"],\r\n        },\r\n      },\r\n      {\r\n        name: \"search-events\",\r\n        description: \"Search for events in a calendar by text query\",\r\n        inputSchema: {\r\n          type: \"object\",\r\n          properties: {\r\n            calendarId: {\r\n              type: \"string\",\r\n              description: \"ID of the calendar to search events in (use 'primary' for the main calendar)\",\r\n            },\r\n            query: {\r\n              type: \"string\",\r\n              description: \"Free text search query (searches summary, description, location, attendees, etc.)\",\r\n            },\r\n            timeMin: {\r\n              type: \"string\",\r\n              format: \"date-time\",\r\n              description: \"Start time boundary in ISO format with timezone required (e.g., 2024-01-01T00:00:00Z or 2024-01-01T00:00:00+00:00). Date-time must end with Z (UTC) or +/-HH:MM offset.\",\r\n            },\r\n            timeMax: {\r\n              type: \"string\",\r\n              format: \"date-time\",\r\n              description: \"End time boundary in ISO format with timezone required (e.g., 2024-12-31T23:59:59Z or 2024-12-31T23:59:59+00:00). Date-time must end with Z (UTC) or +/-HH:MM offset.\",\r\n            },\r\n          },\r\n          required: [\"calendarId\", \"query\"],\r\n        },\r\n      },\r\n      {\r\n        name: \"list-colors\",\r\n        description: \"List available color IDs and their meanings for calendar events\",\r\n        inputSchema: {\r\n          type: \"object\",\r\n          properties: {}, // No arguments needed\r\n          required: [],\r\n        },\r\n      },\r\n      {\r\n        name: \"create-event\",\r\n        description: \"Create a new calendar event\",\r\n        inputSchema: {\r\n          type: \"object\",\r\n          properties: {\r\n            calendarId: {\r\n              type: \"string\",\r\n              description: \"ID of the calendar to create the event in (use 'primary' for the main calendar)\",\r\n            },\r\n            summary: {\r\n              type: \"string\",\r\n              description: \"Title of the event\",\r\n            },\r\n            description: {\r\n              type: \"string\",\r\n              description: \"Description/notes for the event (optional)\",\r\n            },\r\n            start: {\r\n              type: \"string\",\r\n              format: \"date-time\",\r\n              description: \"Start time in ISO format with timezone required (e.g., 2024-08-15T10:00:00Z or 2024-08-15T10:00:00-07:00). Date-time must end with Z (UTC) or +/-HH:MM offset.\",\r\n            },\r\n            end: {\r\n              type: \"string\",\r\n              format: \"date-time\",\r\n              description: \"End time in ISO format with timezone required (e.g., 2024-08-15T11:00:00Z or 2024-08-15T11:00:00-07:00). Date-time must end with Z (UTC) or +/-HH:MM offset.\",\r\n            },\r\n            timeZone: {\r\n              type: \"string\",\r\n              description:\r\n                \"Timezone of the event start/end times, formatted as an IANA Time Zone Database name (e.g., America/Los_Angeles). Required if start/end times are specified, especially for recurring events.\",\r\n            },\r\n            location: {\r\n              type: \"string\",\r\n              description: \"Location of the event (optional)\",\r\n            },\r\n            attendees: {\r\n              type: \"array\",\r\n              description: \"List of attendee email addresses (optional)\",\r\n              items: {\r\n                type: \"object\",\r\n                properties: {\r\n                  email: {\r\n                    type: \"string\",\r\n                    format: \"email\",\r\n                    description: \"Email address of the attendee\",\r\n                  },\r\n                },\r\n                required: [\"email\"],\r\n              },\r\n            },\r\n            colorId: {\r\n              type: \"string\",\r\n              description: \"Color ID for the event (optional, use list-colors to see available IDs)\",\r\n            },\r\n            reminders: remindersInputProperty,\r\n            recurrence: {\r\n              type: \"array\",\r\n              description:\r\n                \"List of recurrence rules (RRULE, EXRULE, RDATE, EXDATE) in RFC5545 format (optional). Example: [\\\"RRULE:FREQ=WEEKLY;COUNT=5\\\"]\",\r\n              items: {\r\n                type: \"string\"\r\n              }\r\n            },\r\n          },\r\n          required: [\"calendarId\", \"summary\", \"start\", \"end\", \"timeZone\"],\r\n        },\r\n      },\r\n      {\r\n        name: \"update-event\",\r\n        description: \"Update an existing calendar event\",\r\n        inputSchema: {\r\n          type: \"object\",\r\n          properties: {\r\n            calendarId: {\r\n              type: \"string\",\r\n              description: \"ID of the calendar containing the event\",\r\n            },\r\n            eventId: {\r\n              type: \"string\",\r\n              description: \"ID of the event to update\",\r\n            },\r\n            summary: {\r\n              type: \"string\",\r\n              description: \"New title for the event (optional)\",\r\n            },\r\n            description: {\r\n              type: \"string\",\r\n              description: \"New description for the event (optional)\",\r\n            },\r\n            start: {\r\n              type: \"string\",\r\n              format: \"date-time\",\r\n              description: \"New start time in ISO format with timezone required (e.g., 2024-08-15T10:00:00Z or 2024-08-15T10:00:00-07:00). Date-time must end with Z (UTC) or +/-HH:MM offset.\",\r\n            },\r\n            end: {\r\n              type: \"string\",\r\n              format: \"date-time\",\r\n              description: \"New end time in ISO format with timezone required (e.g., 2024-08-15T11:00:00Z or 2024-08-15T11:00:00-07:00). Date-time must end with Z (UTC) or +/-HH:MM offset.\",\r\n            },\r\n            timeZone: {\r\n              type: \"string\",\r\n              description:\r\n                \"Timezone for the start/end times (IANA format, e.g., America/Los_Angeles). Required if modifying start/end, or for recurring events.\",\r\n            },\r\n            location: {\r\n              type: \"string\",\r\n              description: \"New location for the event (optional)\",\r\n            },\r\n            colorId: {\r\n              type: \"string\",\r\n              description: \"New color ID for the event (optional)\",\r\n            },\r\n            attendees: {\r\n              type: \"array\",\r\n              description: \"New list of attendee email addresses (optional, replaces existing attendees)\",\r\n              items: {\r\n                type: \"object\",\r\n                properties: {\r\n                  email: {\r\n                    type: \"string\",\r\n                    format: \"email\",\r\n                    description: \"Email address of the attendee\",\r\n                  },\r\n                },\r\n                required: [\"email\"],\r\n              },\r\n            },\r\n            reminders: {\r\n                ...remindersInputProperty,\r\n                description: \"New reminder settings for the event (optional)\",\r\n            },\r\n            recurrence: {\r\n              type: \"array\",\r\n              description:\r\n                \"New list of recurrence rules (RFC5545 format, optional, replaces existing rules). Example: [\\\"RRULE:FREQ=DAILY;COUNT=10\\\"]\",\r\n              items: {\r\n                type: \"string\"\r\n              }\r\n            },\r\n          },\r\n          required: [\"calendarId\", \"eventId\", \"timeZone\"], // timeZone is technically required for PATCH\r\n        },\r\n      },\r\n      {\r\n        name: \"delete-event\",\r\n        description: \"Delete a calendar event\",\r\n        inputSchema: {\r\n          type: \"object\",\r\n          properties: {\r\n            calendarId: {\r\n              type: \"string\",\r\n              description: \"ID of the calendar containing the event\",\r\n            },\r\n            eventId: {\r\n              type: \"string\",\r\n              description: \"ID of the event to delete\",\r\n            },\r\n          },\r\n          required: [\"calendarId\", \"eventId\"],\r\n        },\r\n      },\r\n    ],\r\n  };\r\n} ", "import { z } from 'zod';\r\n\r\n// Zod schemas for input validation\r\n\r\nexport const ReminderSchema = z.object({\r\n  method: z.enum(['email', 'popup']).default('popup'),\r\n  minutes: z.number(),\r\n});\r\n\r\nexport const RemindersSchema = z.object({\r\n  useDefault: z.boolean(),\r\n  overrides: z.array(ReminderSchema).optional(),\r\n});\r\n\r\n// ISO datetime regex that requires timezone designator (Z or +/-HH:MM)\r\nconst isoDateTimeWithTimezone = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(Z|[+-]\\d{2}:\\d{2})$/;\r\n\r\nexport const ListEventsArgumentsSchema = z.object({\r\n  calendarId: z.string(),\r\n  timeMin: z.string()\r\n    .regex(isoDateTimeWithTimezone, \"Must be ISO format with timezone (e.g., 2024-01-01T00:00:00Z)\")\r\n    .optional(),\r\n  timeMax: z.string()\r\n    .regex(isoDateTimeWithTimezone, \"Must be ISO format with timezone (e.g., 2024-12-31T23:59:59Z)\")\r\n    .optional(),\r\n});\r\n\r\nexport const SearchEventsArgumentsSchema = z.object({\r\n  calendarId: z.string(),\r\n  query: z.string(),\r\n  timeMin: z.string()\r\n    .regex(isoDateTimeWithTimezone, \"Must be ISO format with timezone (e.g., 2024-01-01T00:00:00Z)\")\r\n    .optional(), \r\n  timeMax: z.string()\r\n    .regex(isoDateTimeWithTimezone, \"Must be ISO format with timezone (e.g., 2024-12-31T23:59:59Z)\")\r\n    .optional(),\r\n});\r\n\r\nexport const CreateEventArgumentsSchema = z.object({\r\n  calendarId: z.string(),\r\n  summary: z.string(),\r\n  description: z.string().optional(),\r\n  start: z.string().regex(isoDateTimeWithTimezone, \"Must be ISO format with timezone (e.g., 2024-01-01T00:00:00Z)\"), \r\n  end: z.string().regex(isoDateTimeWithTimezone, \"Must be ISO format with timezone (e.g., 2024-01-01T00:00:00Z)\"),\r\n  timeZone: z.string(),\r\n  attendees: z\r\n    .array(\r\n      z.object({\r\n        email: z.string(),\r\n      })\r\n    )\r\n    .optional(),\r\n  location: z.string().optional(),\r\n  colorId: z.string().optional(),\r\n  reminders: RemindersSchema.optional(),\r\n  recurrence: z.array(z.string()).optional(),\r\n});\r\n\r\nexport const UpdateEventArgumentsSchema = z.object({\r\n  calendarId: z.string(),\r\n  eventId: z.string(),\r\n  summary: z.string().optional(),\r\n  description: z.string().optional(),\r\n  start: z.string()\r\n    .regex(isoDateTimeWithTimezone, \"Must be ISO format with timezone (e.g., 2024-01-01T00:00:00Z)\")\r\n    .optional(),\r\n  end: z.string()\r\n    .regex(isoDateTimeWithTimezone, \"Must be ISO format with timezone (e.g., 2024-01-01T00:00:00Z)\")\r\n    .optional(),\r\n  timeZone: z.string(), // Required even if start/end don't change, per API docs for patch\r\n  attendees: z\r\n    .array(\r\n      z.object({\r\n        email: z.string(),\r\n      })\r\n    )\r\n    .optional(),\r\n  location: z.string().optional(),\r\n  colorId: z.string().optional(),\r\n  reminders: RemindersSchema.optional(),\r\n  recurrence: z.array(z.string()).optional(),\r\n});\r\n\r\nexport const DeleteEventArgumentsSchema = z.object({\r\n  calendarId: z.string(),\r\n  eventId: z.string(),\r\n}); ", "import { google, calendar_v3 } from 'googleapis';\r\nimport { OAuth2Client } from 'google-auth-library';\r\nimport { GaxiosError } from 'gaxios';\r\nimport {\r\n    ListEventsArgumentsSchema,\r\n    SearchEventsArgumentsSchema,\r\n    CreateEventArgumentsSchema,\r\n    UpdateEventArgumentsSchema,\r\n    DeleteEventArgumentsSchema,\r\n} from '../schemas/validators.js';\r\nimport { z } from 'zod';\r\n\r\n// Helper function to handle common GaxiosError for invalid grant\r\nfunction handleGoogleApiError(error: unknown): void {\r\n    if (error instanceof GaxiosError && error.response?.data?.error === 'invalid_grant') {\r\n        throw new Error('Google API Error: Authentication token is invalid or expired. Please re-run the authentication process (e.g., `npm run auth`).');\r\n    }\r\n    // Re-throw other errors\r\n    throw error;\r\n}\r\n\r\n/**\r\n * Lists all available calendars.\r\n */\r\nexport async function listCalendars(client: OAuth2Client): Promise<calendar_v3.Schema$CalendarListEntry[]> {\r\n    try {\r\n        const calendar = google.calendar({ version: 'v3', auth: client });\r\n        const response = await calendar.calendarList.list();\r\n        return response.data.items || [];\r\n    } catch (error) {\r\n        handleGoogleApiError(error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Lists events from a specific calendar.\r\n */\r\nexport async function listEvents(\r\n    client: OAuth2Client, \r\n    args: z.infer<typeof ListEventsArgumentsSchema>\r\n): Promise<calendar_v3.Schema$Event[]> {\r\n    try {\r\n        const calendar = google.calendar({ version: 'v3', auth: client });\r\n        const response = await calendar.events.list({\r\n            calendarId: args.calendarId,\r\n            timeMin: args.timeMin,\r\n            timeMax: args.timeMax,\r\n            singleEvents: true,\r\n            orderBy: 'startTime',\r\n        });\r\n        return response.data.items || [];\r\n    } catch (error) {\r\n        handleGoogleApiError(error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Searches for events in a specific calendar based on a query.\r\n */\r\nexport async function searchEvents(\r\n    client: OAuth2Client, \r\n    args: z.infer<typeof SearchEventsArgumentsSchema>\r\n): Promise<calendar_v3.Schema$Event[]> {\r\n    try {\r\n        const calendar = google.calendar({ version: 'v3', auth: client });\r\n        const response = await calendar.events.list({\r\n            calendarId: args.calendarId,\r\n            q: args.query,\r\n            timeMin: args.timeMin,\r\n            timeMax: args.timeMax,\r\n            singleEvents: true,\r\n            orderBy: 'startTime',\r\n        });\r\n        return response.data.items || [];\r\n    } catch (error) {\r\n        handleGoogleApiError(error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Lists available event colors.\r\n */\r\nexport async function listColors(client: OAuth2Client): Promise<calendar_v3.Schema$Colors> {\r\n    try {\r\n        const calendar = google.calendar({ version: 'v3', auth: client });\r\n        const response = await calendar.colors.get();\r\n        if (!response.data) throw new Error('Failed to retrieve colors');\r\n        return response.data;\r\n    } catch (error) {\r\n        handleGoogleApiError(error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a new calendar event.\r\n */\r\nexport async function createEvent(\r\n    client: OAuth2Client, \r\n    args: z.infer<typeof CreateEventArgumentsSchema>\r\n): Promise<calendar_v3.Schema$Event> {\r\n    try {\r\n        const calendar = google.calendar({ version: 'v3', auth: client });\r\n        const requestBody: calendar_v3.Schema$Event = {\r\n            summary: args.summary,\r\n            description: args.description,\r\n            start: { dateTime: args.start, timeZone: args.timeZone },\r\n            end: { dateTime: args.end, timeZone: args.timeZone },\r\n            attendees: args.attendees,\r\n            location: args.location,\r\n            colorId: args.colorId,\r\n            reminders: args.reminders,\r\n            recurrence: args.recurrence,\r\n        };\r\n        const response = await calendar.events.insert({\r\n            calendarId: args.calendarId,\r\n            requestBody: requestBody,\r\n        });\r\n        if (!response.data) throw new Error('Failed to create event, no data returned');\r\n        return response.data;\r\n    } catch (error) {\r\n        handleGoogleApiError(error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Updates an existing calendar event.\r\n */\r\nexport async function updateEvent(\r\n    client: OAuth2Client, \r\n    args: z.infer<typeof UpdateEventArgumentsSchema>\r\n): Promise<calendar_v3.Schema$Event> {\r\n    try {\r\n        const calendar = google.calendar({ version: 'v3', auth: client });\r\n        const requestBody: calendar_v3.Schema$Event = {};\r\n        if (args.summary !== undefined) requestBody.summary = args.summary;\r\n        if (args.description !== undefined) requestBody.description = args.description;\r\n        \r\n        let timeChanged = false;\r\n        if (args.start !== undefined) {\r\n            requestBody.start = { dateTime: args.start, timeZone: args.timeZone };\r\n            timeChanged = true;\r\n        }\r\n        if (args.end !== undefined) {\r\n            requestBody.end = { dateTime: args.end, timeZone: args.timeZone };\r\n            timeChanged = true;\r\n        }\r\n        \r\n        // If start or end was changed, ensure both objects exist and have the timezone.\r\n        // Also apply timezone if it's the only time-related field provided (for recurring events)\r\n        if (timeChanged || (!args.start && !args.end && args.timeZone)) {\r\n            if (!requestBody.start) requestBody.start = {};\r\n            if (!requestBody.end) requestBody.end = {};\r\n            // Only add timezone if not already added via dateTime object creation above\r\n            if (!requestBody.start.timeZone) requestBody.start.timeZone = args.timeZone;\r\n            if (!requestBody.end.timeZone) requestBody.end.timeZone = args.timeZone; \r\n        } \r\n\r\n        if (args.attendees !== undefined) requestBody.attendees = args.attendees;\r\n        if (args.location !== undefined) requestBody.location = args.location;\r\n        if (args.colorId !== undefined) requestBody.colorId = args.colorId;\r\n        if (args.reminders !== undefined) requestBody.reminders = args.reminders;\r\n        if (args.recurrence !== undefined) requestBody.recurrence = args.recurrence;\r\n\r\n        const response = await calendar.events.patch({\r\n            calendarId: args.calendarId,\r\n            eventId: args.eventId,\r\n            requestBody: requestBody,\r\n        });\r\n        if (!response.data) throw new Error('Failed to update event, no data returned');\r\n        return response.data;\r\n    } catch (error) {\r\n        handleGoogleApiError(error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n/**\r\n * Deletes a calendar event.\r\n */\r\nexport async function deleteEvent(\r\n    client: OAuth2Client, \r\n    args: z.infer<typeof DeleteEventArgumentsSchema>\r\n): Promise<void> {\r\n    try {\r\n        const calendar = google.calendar({ version: 'v3', auth: client });\r\n        await calendar.events.delete({\r\n            calendarId: args.calendarId,\r\n            eventId: args.eventId,\r\n        });\r\n    } catch (error) {\r\n        handleGoogleApiError(error);\r\n    }\r\n} ", "import { CallToolRequestSchema } from \"@modelcontextprotocol/sdk/types.js\";\r\nimport { OAuth2Client } from 'google-auth-library';\r\nimport { calendar_v3 } from 'googleapis';\r\nimport {\r\n    ListEventsArgumentsSchema,\r\n    SearchEventsArgumentsSchema,\r\n    CreateEventArgumentsSchema,\r\n    UpdateEventArgumentsSchema,\r\n    DeleteEventArgumentsSchema,\r\n} from '../schemas/validators.js';\r\nimport {\r\n    listCalendars,\r\n    listEvents,\r\n    searchEvents,\r\n    listColors,\r\n    createEvent,\r\n    updateEvent,\r\n    deleteEvent\r\n} from '../services/googleCalendar.js';\r\n\r\n/**\r\n * Formats a list of calendars into a user-friendly string.\r\n */\r\nfunction formatCalendarList(calendars: calendar_v3.Schema$CalendarListEntry[]): string {\r\n    return calendars\r\n        .map((cal) => `${cal.summary || \"Untitled\"} (${cal.id || \"no-id\"})`)\r\n        .join(\"\\n\");\r\n}\r\n\r\n/**\r\n * Formats a list of events into a user-friendly string.\r\n */\r\nfunction formatEventList(events: calendar_v3.Schema$Event[]): string {\r\n    return events\r\n        .map((event) => {\r\n            const attendeeList = event.attendees\r\n                ? `\\nAttendees: ${event.attendees\r\n                    .map((a) => `${a.email || \"no-email\"} (${a.responseStatus || \"unknown\"})`)\r\n                    .join(\", \")}`\r\n                : \"\";\r\n            const locationInfo = event.location ? `\\nLocation: ${event.location}` : \"\";\r\n            const colorInfo = event.colorId ? `\\nColor ID: ${event.colorId}` : \"\";\r\n            const reminderInfo = event.reminders\r\n                ? `\\nReminders: ${event.reminders.useDefault ? 'Using default' :\r\n                    (event.reminders.overrides || []).map((r: any) => `${r.method} ${r.minutes} minutes before`).join(', ') || 'None'}`\r\n                : \"\";\r\n            return `${event.summary || \"Untitled\"} (${event.id || \"no-id\"})${locationInfo}\\nStart: ${event.start?.dateTime || event.start?.date || \"unspecified\"}\\nEnd: ${event.end?.dateTime || event.end?.date || \"unspecified\"}${attendeeList}${colorInfo}${reminderInfo}\\n`;\r\n        })\r\n        .join(\"\\n\");\r\n}\r\n\r\n/**\r\n * Formats the color information into a user-friendly string.\r\n */\r\nfunction formatColorList(colors: calendar_v3.Schema$Colors): string {\r\n    const eventColors = colors.event || {};\r\n    return Object.entries(eventColors)\r\n        .map(([id, colorInfo]) => `Color ID: ${id} - ${colorInfo.background} (background) / ${colorInfo.foreground} (foreground)`)\r\n        .join(\"\\n\");\r\n}\r\n\r\n/**\r\n * Handles incoming tool calls, validates arguments, calls the appropriate service,\r\n * and formats the response.\r\n * \r\n * @param request The CallToolRequest containing tool name and arguments.\r\n * @param oauth2Client The authenticated OAuth2 client instance.\r\n * @returns A Promise resolving to the CallToolResponse.\r\n */\r\nexport async function handleCallTool(request: typeof CallToolRequestSchema._type, oauth2Client: OAuth2Client) {\r\n    const { name, arguments: args } = request.params;\r\n\r\n    try {\r\n        switch (name) {\r\n            case \"list-calendars\": {\r\n                const calendars = await listCalendars(oauth2Client);\r\n                return {\r\n                    content: [{\r\n                        type: \"text\",\r\n                        text: formatCalendarList(calendars),\r\n                    }],\r\n                };\r\n            }\r\n\r\n            case \"list-events\": {\r\n                const validArgs = ListEventsArgumentsSchema.parse(args);\r\n                const events = await listEvents(oauth2Client, validArgs);\r\n                return {\r\n                    content: [{\r\n                        type: \"text\",\r\n                        text: formatEventList(events),\r\n                    }],\r\n                };\r\n            }\r\n\r\n            case \"search-events\": {\r\n                const validArgs = SearchEventsArgumentsSchema.parse(args);\r\n                const events = await searchEvents(oauth2Client, validArgs);\r\n                return {\r\n                    content: [{\r\n                        type: \"text\",\r\n                        text: formatEventList(events), // Same formatting as list-events\r\n                    }],\r\n                };\r\n            }\r\n\r\n            case \"list-colors\": {\r\n                const colors = await listColors(oauth2Client);\r\n                return {\r\n                    content: [{\r\n                        type: \"text\",\r\n                        text: `Available event colors:\\n${formatColorList(colors)}`,\r\n                    }],\r\n                };\r\n            }\r\n\r\n            case \"create-event\": {\r\n                const validArgs = CreateEventArgumentsSchema.parse(args);\r\n                const event = await createEvent(oauth2Client, validArgs);\r\n                return {\r\n                    content: [{\r\n                        type: \"text\",\r\n                        text: `Event created: ${event.summary} (${event.id})`,\r\n                    }],\r\n                };\r\n            }\r\n\r\n            case \"update-event\": {\r\n                const validArgs = UpdateEventArgumentsSchema.parse(args);\r\n                const event = await updateEvent(oauth2Client, validArgs);\r\n                return {\r\n                    content: [{\r\n                        type: \"text\",\r\n                        text: `Event updated: ${event.summary} (${event.id})`,\r\n                    }],\r\n                };\r\n            }\r\n\r\n            case \"delete-event\": {\r\n                const validArgs = DeleteEventArgumentsSchema.parse(args);\r\n                await deleteEvent(oauth2Client, validArgs);\r\n                return {\r\n                    content: [{\r\n                        type: \"text\",\r\n                        text: `Event deleted successfully`,\r\n                    }],\r\n                };\r\n            }\r\n\r\n            default:\r\n                throw new Error(`Unknown tool: ${name}`);\r\n        }\r\n    } catch (error: unknown) {\r\n        console.error(`Error executing tool '${name}':`, error);\r\n        // Re-throw the error to be handled by the main server logic or error handler\r\n        throw error;\r\n    }\r\n} "],
  "mappings": "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",
  "names": ["fileURLToPath", "OAuth2Client", "fs", "path", "oauth2Client", "oauth2Client", "OAuth2Client", "resolve", "GaxiosError", "oauth2Client", "fileURLToPath"]
}
